import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class Auctionandtender extends StatefulWidget {
  // This constructor can be used to pass a specific tender name if needed,
  // but for a new tender, we'll generate it.
  const Auctionandtender({Key? key}) : super(key: key);

  @override
  _AuctionAndTenderState createState() => _AuctionAndTenderState();
}

class _AuctionAndTenderState extends State<Auctionandtender> {
  final _formKey = GlobalKey<FormState>();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Form Controllers
  final _quantityController = TextEditingController();
  final _deliveryTimelineController = TextEditingController();
  final _deliveryLocationController = TextEditingController();
  final _baseBudgetController = TextEditingController();
  final _licenseDurationController = TextEditingController();
  final _penaltyClausesController = TextEditingController();

  // Unique Tender ID - will be generated by Firestore
  String? _tenderId;

  // Dropdown values
  String? _selectedAuctionType;
  String? _selectedCategory;
  String? _selectedItem;
  String? _selectedAuctionMode;
  String? _selectedPricingType;
  String? _selectedPaymentTerms;
  String? _selectedTaxes;
  String? _selectedInsuranceRequirement;
  String? _selectedPackagingRequirement;
  String? _selectedSpecialHandling;
  DateTime? _tenderDeadline;
  DateTime? _openingTime;
  bool _carbonFootprintBonus = false;

  // Dropdown options (kept as is from your original code)
  final List<String> _auctionTypes = [
    'Open Auction',
    'Lowest Bidder Wins'
  ];

  final List<String> _auctionModes = [
    'Manual Bidding',
     'Online Bidding'
  ];

  final Map<String, List<String>> _categoriesAndItems = {
    'Electronics': [
      'Smartphones', 'Laptops', 'Tablets', 'TVs', 'Headphones',
      'Cameras', 'Gaming Consoles', 'Smart Watches', 'Speakers'
    ],
    'Groceries': [
      'Fresh Produce', 'Dairy Products', 'Meat & Seafood', 'Frozen Foods',
      'Canned Goods', 'Beverages', 'Snacks', 'Bakery Items', 'Organic Products'
    ],
    'Home & Garden': [
      'Furniture', 'Home Decor', 'Kitchen Appliances', 'Bedding & Bath',
      'Garden Tools', 'Outdoor Furniture', 'Cleaning Supplies', 'Storage Solutions'
    ],
    'Clothing & Accessories': [
      'Men\'s Clothing', 'Women\'s Clothing', 'Children\'s Clothing',
      'Shoes', 'Accessories', 'Jewelry', 'Bags & Luggage'
    ],
    'Health & Beauty': [
      'Personal Care', 'Skincare', 'Makeup', 'Hair Care', 'Vitamins & Supplements',
      'Medical Supplies', 'Fitness Equipment'
    ],
    'Automotive': [
      'Car Parts', 'Tires', 'Motor Oil', 'Car Accessories', 'Tools',
      'Batteries', 'Cleaning Products'
    ],
    'Toys & Games': [
      'Action Figures', 'Board Games', 'Educational Toys', 'Outdoor Toys',
      'Video Games', 'Puzzles', 'Arts & Crafts'
    ],
    'Sports & Outdoors': [
      'Exercise Equipment', 'Outdoor Gear', 'Sports Apparel', 'Camping Equipment',
      'Fishing Gear', 'Bikes & Accessories'
    ]
  };

  final List<String> _pricingTypes = [
    'Per Unit',
    'Per Lot',
    'Total Fixed Price',
    'Bulk Pricing'
  ];

  final List<String> _paymentTerms = [
    'Net 30',
    'Net 15',
    'Prepaid',
    'COD (Cash on Delivery)',
    'Milestone Based',
    'LC (Letter of Credit)'
  ];

  final List<String> _taxesOptions = [
    'GST Included',
    'GST Excluded',
    'Tax Exempt',
    'Custom Tax Rate'
  ];

  final List<String> _insuranceOptions = [
    'Goods-in-Transit Required',
    'Not Required',
    'Supplier Responsibility',
    'Buyer Responsibility'
  ];

  final List<String> _packagingOptions = [
    'Standard Packaging',
    'Custom Labeling Required',
    'Specific Pallet Size',
    'Eco-Friendly Packaging',
    'Bulk Packaging'
  ];

  final List<String> _specialHandlingOptions = [
    'None',
    'Cold Chain Required',
    'Fragile Handling',
    'Hazmat Certified',
    'Temperature Controlled',
    'Express Handling'
  ];

  @override
  void initState() {
    super.initState();
    // Generate a temporary ID for display before final submission
    _tenderId = _firestore.collection('tenders').doc().id;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF0D1B2A), // Dominant dark blue
      appBar: AppBar(
        title: Text(
          // Dynamically set app bar title based on tender type
          _tenderId != null && _tenderId!.startsWith('walmart_')
              ? 'Create Walmart Tender'
              : 'Create Tender',
          style: const TextStyle(
            color: Colors.white,
            fontSize: 20,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: const Color(0xFF1B263B), // Slightly lighter dark blue
        elevation: 4, // More formal elevation
        iconTheme: const IconThemeData(color: Colors.white),
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              Color(0xFF0D1B2A), // Dark blue start
              Color(0xFF1B263B), // Lighter dark blue end
            ],
          ),
        ),
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildSectionHeader('âœ… Basic Tender Details'),
                _buildCard([
                  _buildTenderIdDisplayField(
                    label: 'Tender ID',
                    value: _tenderId ?? 'Generating ID...',
                    icon: Icons.vpn_key,
                  ),
                  _buildDropdownField(
                    label: 'Auction Type',
                    value: _selectedAuctionType,
                    items: _auctionTypes,
                    onChanged: (value) => setState(() => _selectedAuctionType = value),
                    icon: Icons.gavel,
                  ),
                  _buildDateTimeField(
                    label: 'Tender Deadline',
                    selectedDate: _tenderDeadline,
                    onDateSelected: (date) => setState(() => _tenderDeadline = date),
                    icon: Icons.schedule,
                  ),
                  _buildDateTimeField(
                    label: 'Opening Time',
                    selectedDate: _openingTime,
                    onDateSelected: (date) => setState(() => _openingTime = date),
                    icon: Icons.access_time,
                  ),
                  _buildDropdownField(
                    label: 'Auction Mode',
                    value: _selectedAuctionMode,
                    items: _auctionModes,
                    onChanged: (value) => setState(() => _selectedAuctionMode = value),
                    icon: Icons.settings,
                  ),
                ]),

                const SizedBox(height: 24),
                _buildSectionHeader('ðŸ“¦ Product & Delivery Details'),
                _buildCard([
                  _buildDropdownField(
                    label: 'Category',
                    value: _selectedCategory,
                    items: _categoriesAndItems.keys.toList(),
                    onChanged: (value) {
                      setState(() {
                        _selectedCategory = value;
                        _selectedItem = null; // Reset item when category changes
                      });
                    },
                    icon: Icons.category,
                  ),
                  if (_selectedCategory != null)
                    _buildDropdownField(
                      label: 'Item',
                      value: _selectedItem,
                      items: _categoriesAndItems[_selectedCategory!] ?? [],
                      onChanged: (value) => setState(() => _selectedItem = value),
                      icon: Icons.inventory,
                    ),
                  _buildTextFormField(
                    controller: _quantityController,
                    label: 'Quantity Required',
                    hint: 'e.g. 10,000 units',
                    icon: Icons.numbers,
                    keyboardType: TextInputType.number,
                  ),
                  _buildTextFormField(
                    controller: _deliveryTimelineController,
                    label: 'Expected Delivery Timeline',
                    hint: 'e.g. within 5 days of order',
                    icon: Icons.timer,
                  ),
                  _buildTextFormField(
                    controller: _deliveryLocationController,
                    label: 'Delivery Location(s)',
                    hint: 'DC address(es) or ZIP codes',
                    icon: Icons.location_on,
                    maxLines: 2,
                  ),
                  _buildDropdownField(
                    label: 'Packaging Requirements',
                    value: _selectedPackagingRequirement,
                    items: _packagingOptions,
                    onChanged: (value) => setState(() => _selectedPackagingRequirement = value),
                    icon: Icons.inventory_2,
                  ),
                  _buildDropdownField(
                    label: 'Special Handling',
                    value: _selectedSpecialHandling,
                    items: _specialHandlingOptions,
                    onChanged: (value) => setState(() => _selectedSpecialHandling = value),
                    icon: Icons.warning,
                  ),
                ]),

                const SizedBox(height: 24),
                _buildSectionHeader('ðŸ’° Pricing & Payment'),
                _buildCard([
                  _buildTextFormField(
                    controller: _baseBudgetController,
                    label: 'Base Budget (Optional)',
                    hint: 'Maximum price in mind',
                    icon: Icons.attach_money,
                    keyboardType: TextInputType.number,
                  ),
                  _buildDropdownField(
                    label: 'Pricing Type',
                    value: _selectedPricingType,
                    items: _pricingTypes,
                    onChanged: (value) => setState(() => _selectedPricingType = value),
                    icon: Icons.price_change,
                  ),
                  _buildDropdownField(
                    label: 'Payment Terms',
                    value: _selectedPaymentTerms,
                    items: _paymentTerms,
                    onChanged: (value) => setState(() => _selectedPaymentTerms = value),
                    icon: Icons.payment,
                  ),
                  _buildDropdownField(
                    label: 'Taxes & Deductions',
                    value: _selectedTaxes,
                    items: _taxesOptions,
                    onChanged: (value) => setState(() => _selectedTaxes = value),
                    icon: Icons.receipt,
                  ),
                ]),

                const SizedBox(height: 24),
                _buildSectionHeader('ðŸ“œ Contract & Agreement Terms'),
                _buildCard([
                  _buildTextFormField(
                    controller: _licenseDurationController,
                    label: 'License Duration',
                    hint: 'e.g. 6 months / 1 year agreement',
                    icon: Icons.timer,
                  ),
                  _buildTextFormField(
                    controller: _penaltyClausesController,
                    label: 'Penalty Clauses',
                    hint: 'For late delivery, poor quality, etc.',
                    icon: Icons.warning,
                    maxLines: 3,
                  ),
                  _buildDropdownField(
                    label: 'Insurance Requirement',
                    value: _selectedInsuranceRequirement,
                    items: _insuranceOptions,
                    onChanged: (value) => setState(() => _selectedInsuranceRequirement = value),
                    icon: Icons.security,
                  ),
                  _buildSwitchTile(
                    title: 'Carbon Footprint Bonus',
                    subtitle: 'Extra credit for eco-routing',
                    value: _carbonFootprintBonus,
                    onChanged: (value) => setState(() => _carbonFootprintBonus = value),
                    icon: Icons.eco,
                  ),
                ]),

                const SizedBox(height: 32),
                _buildSubmitButton(),
                const SizedBox(height: 32),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildSectionHeader(String title) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: Text(
        title,
        style: const TextStyle(
          color: Color(0xFF64B5F6), // Brighter blue for headers
          fontSize: 18,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  Widget _buildCard(List<Widget> children) {
    return Container(
      decoration: BoxDecoration(
        color: const Color(0xFF1B263B), // Card background (slightly lighter than app bar)
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.3), // More pronounced shadow for formality
            spreadRadius: 1,
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
        border: Border.all(color: const Color(0xFF4A90E2).withOpacity(0.6)), // Blue border
      ),
      padding: const EdgeInsets.all(16),
      child: Column(
        children: children,
      ),
    );
  }

  // New widget for displaying the auto-generated Tender ID
  Widget _buildTenderIdDisplayField({
    required String label,
    required String value,
    required IconData icon,
  }) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
      decoration: BoxDecoration(
        color: const Color(0xFF0D1B2A).withOpacity(0.7), // Darker fill
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: const Color(0xFF4A90E2), width: 2), // Prominent blue border
      ),
      child: Row(
        children: [
          Icon(icon, color: const Color(0xFF64B5F6)), // Brighter blue icon
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  label,
                  style: TextStyle(
                    color: const Color(0xFF64B5F6), // Brighter blue label
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  value,
                  style: const TextStyle(
                    color: Colors.white, // White text for the ID
                    fontSize: 16,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTextFormField({
    required TextEditingController controller,
    required String label,
    required String hint,
    required IconData icon,
    TextInputType keyboardType = TextInputType.text,
    int maxLines = 1,
  }) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: TextFormField(
        controller: controller,
        keyboardType: keyboardType,
        maxLines: maxLines,
        style: const TextStyle(color: Colors.white), // White text
        decoration: InputDecoration(
          labelText: label,
          hintText: hint,
          prefixIcon: Icon(icon, color: const Color(0xFF64B5F6)), // Brighter blue icon
          labelStyle: const TextStyle(color: Color(0xFF64B5F6)), // Brighter blue label
          hintStyle: TextStyle(color: Colors.grey[600]), // Slightly darker hint
          filled: true,
          fillColor: const Color(0xFF0D1B2A).withOpacity(0.5), // Darker translucent fill
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: BorderSide(color: const Color(0xFF4A90E2).withOpacity(0.5)), // Muted blue border
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: BorderSide(color: const Color(0xFF4A90E2).withOpacity(0.5)),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: const BorderSide(color: Color(0xFF64B5F6), width: 2), // Bright blue focus
          ),
          errorStyle: const TextStyle(color: Colors.redAccent), // Error text color
        ),
        validator: (value) {
          if (value == null || value.isEmpty) {
            return 'Please enter $label';
          }
          return null;
        },
      ),
    );
  }

  Widget _buildDropdownField({
    required String label,
    required String? value,
    required List<String> items,
    required Function(String?) onChanged,
    required IconData icon,
  }) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: DropdownButtonFormField<String>(
        value: value,
        decoration: InputDecoration(
          labelText: label,
          prefixIcon: Icon(icon, color: const Color(0xFF64B5F6)), // Brighter blue icon
          labelStyle: const TextStyle(color: Color(0xFF64B5F6)), // Brighter blue label
          filled: true,
          fillColor: const Color(0xFF0D1B2A).withOpacity(0.5), // Darker translucent fill
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: BorderSide(color: const Color(0xFF4A90E2).withOpacity(0.5)),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: BorderSide(color: const Color(0xFF4A90E2).withOpacity(0.5)),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: const BorderSide(color: Color(0xFF64B5F6), width: 2), // Bright blue focus
          ),
          errorStyle: const TextStyle(color: Colors.redAccent),
        ),
        dropdownColor: const Color(0xFF1B263B), // Dark blue dropdown background
        style: const TextStyle(color: Colors.white), // White text in dropdown
        iconEnabledColor: Colors.white, // Dropdown arrow color
        items: items.map((String item) {
          return DropdownMenuItem<String>(
            value: item,
            child: Text(item, style: const TextStyle(color: Colors.white)),
          );
        }).toList(),
        onChanged: onChanged,
        validator: (value) {
          if (value == null || value.isEmpty) {
            return 'Please select $label';
          }
          return null;
        },
      ),
    );
  }

  Widget _buildDateTimeField({
    required String label,
    required DateTime? selectedDate,
    required Function(DateTime) onDateSelected,
    required IconData icon,
  }) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: InkWell(
        onTap: () async {
          final DateTime? picked = await showDatePicker(
            context: context,
            initialDate: selectedDate ?? DateTime.now(),
            firstDate: DateTime.now(),
            lastDate: DateTime(2030),
            builder: (context, child) {
              return Theme(
                data: Theme.of(context).copyWith(
                  colorScheme: const ColorScheme.dark( // Dark theme for picker
                    primary: Color(0xFF64B5F6), // Bright blue primary
                    onPrimary: Colors.white,
                    surface: Color(0xFF1B263B), // Dark blue surface
                    onSurface: Colors.white,
                  ),
                  textButtonTheme: TextButtonThemeData(
                    style: TextButton.styleFrom(
                      foregroundColor: const Color(0xFF64B5F6), // Bright blue buttons
                    ),
                  ),
                ),
                child: child!,
              );
            },
          );
          if (picked != null) {
            final TimeOfDay? time = await showTimePicker(
              context: context,
              initialTime: TimeOfDay.now(),
              builder: (context, child) {
                return Theme(
                  data: Theme.of(context).copyWith(
                    colorScheme: const ColorScheme.dark( // Dark theme for picker
                      primary: Color(0xFF64B5F6), // Bright blue primary
                      onPrimary: Colors.white,
                      surface: Color(0xFF1B263B), // Dark blue surface
                      onSurface: Colors.white,
                    ),
                    textButtonTheme: TextButtonThemeData(
                      style: TextButton.styleFrom(
                        foregroundColor: const Color(0xFF64B5F6), // Bright blue buttons
                      ),
                    ),
                  ),
                  child: child!,
                );
              },
            );
            if (time != null) {
              final DateTime fullDateTime = DateTime(
                picked.year,
                picked.month,
                picked.day,
                time.hour,
                time.minute,
              );
              onDateSelected(fullDateTime);
            }
          }
        },
        child: Container(
          decoration: BoxDecoration(
            color: const Color(0xFF0D1B2A).withOpacity(0.5), // Darker translucent fill
            borderRadius: BorderRadius.circular(8),
            border: Border.all(color: const Color(0xFF4A90E2).withOpacity(0.5)),
          ),
          padding: const EdgeInsets.all(16),
          child: Row(
            children: [
              Icon(icon, color: const Color(0xFF64B5F6)), // Brighter blue icon
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      label,
                      style: const TextStyle(
                        color: Color(0xFF64B5F6), // Brighter blue label
                        fontSize: 12,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      selectedDate != null
                          ? "${selectedDate!.day}/${selectedDate!.month}/${selectedDate!.year} ${selectedDate!.hour}:${selectedDate!.minute.toString().padLeft(2, '0')}"
                          : 'Select date and time',
                      style: TextStyle(
                        color: selectedDate != null ? Colors.white : Colors.grey[600], // White text for date/time
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSwitchTile({
    required String title,
    required String subtitle,
    required bool value,
    required Function(bool) onChanged,
    required IconData icon,
  }) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: const Color(0xFF0D1B2A).withOpacity(0.5), // Darker translucent fill
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: const Color(0xFF4A90E2).withOpacity(0.5)),
      ),
      child: SwitchListTile(
        title: Text(
          title,
          style: const TextStyle(color: Colors.white, fontWeight: FontWeight.w500), // White text
        ),
        subtitle: Text(
          subtitle,
          style: TextStyle(color: Colors.grey[600]), // Slightly darker subtitle
        ),
        value: value,
        onChanged: onChanged,
        activeColor: const Color(0xFF64B5F6), // Bright blue active switch
        secondary: Icon(icon, color: const Color(0xFF64B5F6)), // Brighter blue icon
      ),
    );
  }

  Widget _buildSubmitButton() {
    return Container(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: _submitTender,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF4A90E2), // Core blue for button
          foregroundColor: Colors.white,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          elevation: 6, // More elevation for formality
        ),
        child: const Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.send, size: 20),
            SizedBox(width: 8),
            Text(
              'Create Tender',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _submitTender() async {
    if (_formKey.currentState!.validate()) {
      try {
        // Show loading indicator
        showDialog(
          context: context,
          barrierDismissible: false,
          builder: (BuildContext context) {
            return AlertDialog(
              backgroundColor: const Color(0xFF1B263B), // Dark blue background for loading
              content: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const CircularProgressIndicator(
                    valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF64B5F6)), // Bright blue spinner
                  ),
                  const SizedBox(height: 16),
                  const Text(
                    'Creating tender...',
                    style: TextStyle(color: Colors.white),
                  ),
                ],
              ),
            );
          },
        );

        // Get the unique ID that was generated in initState or generate a new one if somehow null
        final String finalTenderId = _tenderId ?? _firestore.collection('tenders').doc().id;

        // Create tender document with the unique ID
        await _firestore.collection('tenders').doc(finalTenderId).set({
          'tenderId': finalTenderId, // Store the ID explicitly
          'auctionType': _selectedAuctionType,
          'tenderDeadline': _tenderDeadline?.toIso8601String(),
          'openingTime': _openingTime?.toIso8601String(),
          'auctionMode': _selectedAuctionMode,
          'category': _selectedCategory,
          'item': _selectedItem,
          'quantity': _quantityController.text,
          'deliveryTimeline': _deliveryTimelineController.text,
          'deliveryLocation': _deliveryLocationController.text,
          'packagingRequirements': _selectedPackagingRequirement,
          'specialHandling': _selectedSpecialHandling,
          'baseBudget': _baseBudgetController.text,
          'pricingType': _selectedPricingType,
          'paymentTerms': _selectedPaymentTerms,
          'taxes': _selectedTaxes,
          'licenseDuration': _licenseDurationController.text,
          'penaltyClauses': _penaltyClausesController.text,
          'insuranceRequirement': _selectedInsuranceRequirement,
          'carbonFootprintBonus': _carbonFootprintBonus,
          'createdAt': FieldValue.serverTimestamp(),
          'status': 'Active',
          'orderStatus': 'pending',
          // Assuming "Walmart Tender" means the tenderId itself starts with 'walmart_'
          'isWalmartTender': finalTenderId.startsWith('walmart_'),
        });

        // Close loading dialog
        Navigator.of(context).pop();

        // Show success message
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Tender created successfully!'),
            backgroundColor: Colors.green,
            behavior: SnackBarBehavior.floating,
          ),
        );

        // Clear form and navigate back to the previous page
        _clearForm();
        Navigator.of(context).pop(); // Go back to the previous screen

      } catch (e) {
        // Close loading dialog
        Navigator.of(context).pop();

        // Show error message
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error creating tender: ${e.toString()}'),
            backgroundColor: Colors.red,
            behavior: SnackBarBehavior.floating,
          ),
        );
      }
    }
  }

  void _clearForm() {
    _quantityController.clear();
    _deliveryTimelineController.clear();
    _deliveryLocationController.clear();
    _baseBudgetController.clear();
    _licenseDurationController.clear();
    _penaltyClausesController.clear();

    setState(() {
      _selectedAuctionType = null;
      _selectedCategory = null;
      _selectedItem = null;
      _selectedAuctionMode = null;
      _selectedPricingType = null;
      _selectedPaymentTerms = null;
      _selectedTaxes = null;
      _selectedInsuranceRequirement = null;
      _selectedPackagingRequirement = null;
      _selectedSpecialHandling = null;
      _tenderDeadline = null;
      _openingTime = null;
      _carbonFootprintBonus = false;
      // Generate a new ID for the next potential tender
      _tenderId = _firestore.collection('tenders').doc().id;
    });
  }

  @override
  void dispose() {
    _quantityController.dispose();
    _deliveryTimelineController.dispose();
    _deliveryLocationController.dispose();
    _baseBudgetController.dispose();
    _licenseDurationController.dispose();
    _penaltyClausesController.dispose();
    super.dispose();
  }
}